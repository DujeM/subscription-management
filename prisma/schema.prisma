generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Client {
  id            String         @id @default(cuid())
  name          String
  about         String?
  owner         String?
  address       String?
  phone         String?
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  users         User[]
  subscriptions Subscription[]
  accounts      Account[]
  sessions      Session[]
}

model User {
  id             String        @id @default(cuid())
  client         Client?       @relation(fields: [clientId], references: [id])
  clientId       String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  fullName       String
  email          String        @unique
  password       String
  phone          String?
  address        String?
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt      DateTime      @updatedAt @map(name: "updated_at")
  accounts       Account[]
  sessions       Session[]

  @@map(name: "users")
}

model Subscription {
  id          String   @id @default(cuid())
  client      Client?  @relation(fields: [clientId], references: [id])
  clientId    String?
  users       User[]
  title       String
  description String
  price       Int
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String?   @map("user_id")
  clientId           String?
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation(fields: [userId], references: [id])
  client             Client?   @relation(fields: [clientId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  clientId     String?
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
  client       Client?  @relation(fields: [clientId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
