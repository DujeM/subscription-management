generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Client {
  id            String         @id @default(cuid())
  name          String
  about         String?
  owner         String?
  address       String?
  phone         String?
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  customers     Customer[]
  sessions      Session[]
  subscriptions Subscription[]
}

model Customer {
  id             String        @id @default(cuid())
  clientId       String?
  subscriptionId String?
  fullName       String
  email          String        @unique
  emailConfirmed Boolean
  emailToken     String        @unique
  phone          String?
  address        String?
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  accounts       Account[]
  client         Client?       @relation(fields: [clientId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  sessions       Session[]
}

model Subscription {
  id          String     @id @default(cuid())
  clientId    String?
  title       String
  description String
  currency    String
  price       String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  productId   String
  customers   Customer[]
  client      Client?    @relation(fields: [clientId], references: [id])
}

model Account {
  id                 String    @id @default(cuid())
  customerId         String?   @map("user_id")
  clientId           String?
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  client             Client?   @relation(fields: [clientId], references: [id])
  customer           Customer? @relation(fields: [customerId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  customerId   String?   @map("user_id")
  clientId     String?
  expires      DateTime
  sessionToken String    @unique @map("session_token")
  accessToken  String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  client       Client?   @relation(fields: [clientId], references: [id])
  customer     Customer? @relation(fields: [customerId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
